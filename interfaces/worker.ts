// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.27.3
// source: proto/worker.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Any } from "../google/protobuf/any";

export const protobufPackage = "worker";

export interface Empty {
}

export interface WorkerDelete {
  id: number;
  user: Any | undefined;
}

export interface WorkerResponse {
  data: Worker[];
}

export interface Worker {
  workerId: number;
  workerName: string;
  price: number;
}

export interface WorkerBody {
  workerName: string;
  price: number;
  user: Any | undefined;
}

export interface WorkerBodyUpdate {
  workerName: string;
  price: number;
  id: number;
  user: Any | undefined;
}

export interface WorkerCreateResponse {
  workerId: number;
  workerName: string;
  price: number;
  createdAt: string;
}

export interface WorkerUpdateResponse {
  workerId: number;
  workerName: string;
  price: number;
  createdAt: string;
  updatedAt: string;
}

export const WORKER_PACKAGE_NAME = "worker";

export interface WorkerServiceClient {
  list(request: Empty): Observable<WorkerResponse>;

  create(request: WorkerBody): Observable<WorkerCreateResponse>;

  update(request: WorkerBodyUpdate): Observable<WorkerUpdateResponse>;

  delete(request: WorkerDelete): Observable<Empty>;
}

export interface WorkerServiceController {
  list(request: Empty): Promise<WorkerResponse> | Observable<WorkerResponse> | WorkerResponse;

  create(request: WorkerBody): Promise<WorkerCreateResponse> | Observable<WorkerCreateResponse> | WorkerCreateResponse;

  update(
    request: WorkerBodyUpdate,
  ): Promise<WorkerUpdateResponse> | Observable<WorkerUpdateResponse> | WorkerUpdateResponse;

  delete(request: WorkerDelete): Promise<Empty> | Observable<Empty> | Empty;
}

export function WorkerServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["list", "create", "update", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("WorkerService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("WorkerService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const WORKER_SERVICE_NAME = "WorkerService";
