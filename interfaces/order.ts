// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.27.3
// source: proto/order.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "order";

export interface Empty {
}

export interface ListOrder {
  id: number;
}

export interface UpdateStatus {
  status: string;
}

export interface OrderBody {
  workers: number[];
  startDate: string;
  endDate: string;
  userId: number;
}

export interface OrderResponse {
  orderId: number;
  workers: number[];
  totalDay: number;
  status: string;
  totalPrice: number;
  createdAt: string;
}

export interface WorkerInfo {
  workerId: number;
  workerName: string;
  price: number;
}

export interface OrderDetail {
  orderId: number;
  status: string;
  startDate: string;
  endDate: string;
  totalDay: number;
  totalPrice: number;
  workers: WorkerInfo[];
  createdAt: string;
}

export interface ListOrderResponse {
  orders: OrderDetail[];
}

export interface OrderCancelBody {
  status: string;
  id: number;
  userId: number;
}

export interface OrderCancelResponse {
  orderId: number;
  status: string;
  createdAt: string;
  updatedAt: string;
}

export const ORDER_PACKAGE_NAME = "order";

export interface OrderServiceClient {
  createOrder(request: OrderBody): Observable<OrderResponse>;

  list(request: ListOrder): Observable<ListOrderResponse>;

  cancelOrder(request: OrderCancelBody): Observable<OrderCancelResponse>;

  status(request: UpdateStatus): Observable<Empty>;
}

export interface OrderServiceController {
  createOrder(request: OrderBody): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  list(request: ListOrder): Promise<ListOrderResponse> | Observable<ListOrderResponse> | ListOrderResponse;

  cancelOrder(
    request: OrderCancelBody,
  ): Promise<OrderCancelResponse> | Observable<OrderCancelResponse> | OrderCancelResponse;

  status(request: UpdateStatus): Promise<Empty> | Observable<Empty> | Empty;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createOrder", "list", "cancelOrder", "status"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
