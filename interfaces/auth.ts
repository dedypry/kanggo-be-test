// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.27.3
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface LoginBody {
  emailCellphone: string;
  password: string;
}

export interface loginResponse {
  userId: number;
  email: string;
  token: string;
}

export interface RegisterResponse {
  userId: number;
  email: string;
  fullname: string;
  createdAt: string;
}

export interface RegisterBody {
  fullname: string;
  cellphone: string;
  email: string;
  role: string;
  password: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  register(request: RegisterBody): Observable<RegisterResponse>;

  login(request: LoginBody): Observable<loginResponse>;
}

export interface AuthServiceController {
  register(request: RegisterBody): Promise<RegisterResponse> | Observable<RegisterResponse> | RegisterResponse;

  login(request: LoginBody): Promise<loginResponse> | Observable<loginResponse> | loginResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["register", "login"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
